{"version":3,"sources":["libs/http.js","components/Modal/index.jsx","components/Modal/Modal.module.scss","components/FriendPreview/index.jsx","components/FriendPreview/FriendPreview.module.scss","components/MessagePreview/MessagePreview.module.scss","components/Post/Post.module.scss","pages/Home/Home.module.scss","components/MessagePreview/index.jsx","components/Post/index.jsx","pages/Home/index.jsx"],"names":["BASE_URL","http","resource","fetch","then","response","json","httpPOST","data","method","headers","body","JSON","stringify","httpDELETE","Modal","bgColor","text","className","styles","style","background","module","exports","FriendPreview","props","name","photo","friend","src","alt","MessagePreview","date","Date","sender","message","formatDistance","addSuffix","locale","it","Post","author","useState","isModalVisible","setModalVisibile","post","onClick","id","setTimeout","window","location","href","deleteBtn","friends","messages","posts","Home","friendsPreview","setFriendsPreview","allPosts","setAllPosts","messagesPreview","setMessagesPreview","useEffect","reverse","home","grid","map","index","to","createPostBtn"],"mappings":"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","file":"static/js/3.86b7d55d.chunk.js","sourcesContent":["const BASE_URL = 'https://edgemony-backend.herokuapp.com';\n\n\nconst http = (resource) => fetch(BASE_URL + resource)\n.then((response)=> response.json());\n\nconst httpPOST = (resource, data) => \nfetch(BASE_URL + resource, {\n    method: 'POST',\n    headers: {\n        \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify(data),\n})\n.then((response)=> response.json());\n\n\nconst httpDELETE = (resource) => \nfetch(BASE_URL + resource, {\n    method: 'DELETE',\n    headers: {\n        \"Content-type\": \"application/json\"\n    },\n})\n.then((response)=> response.json());\n\n// Popola la lista degli amici, in base alla lista friendsNames\nconst fillFriendsList = (friendsNames) => {\n    let value = 0;\n    for (value in [...Array(friendsNames.length).keys()]) {\n      httpPOST(\"/friends\", {\n        name: friendsNames[value],\n        photo: `https://randomuser.me/api/portraits/men/${value}.jpg`,\n      });\n  \n      setTimeout(() => {}, 100);\n    }\n  };\n  \n\nexport { http, httpPOST, httpDELETE, fillFriendsList }","import styles from \"./Modal.module.scss\";\n\nconst Modal = ({ bgColor, text }) => {\n  return (\n    <div className={styles.Modal} style={{ background: `${bgColor}` }}>\n      <p>{text}</p>\n    </div>\n  );\n};\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__32mLz\"};","import styles from \"./FriendPreview.module.scss\";\n\nconst FriendPreview = (props) => {\n  const data = props.data || {\n    name: \"Friend\",\n    photo: \"https://randomuser.me/api/portraits/women/59.jpg\",\n  };\n\n  return (\n    <div className={styles.friend}>\n      <img src={data.photo} alt={data.name} />\n      <p>{data.name}</p>\n    </div>\n  );\n};\n\nexport { FriendPreview };\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"FriendPreview_friend__3Gjby\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessagePreview_message__3j9dl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3hqZB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__1JXvv\",\"grid\":\"Home_grid__sUtIT\",\"createPostBtn\":\"Home_createPostBtn__1BGTQ\",\"friend\":\"Home_friend__eOEhP\"};","import { formatDistance } from \"date-fns\";\nimport { it } from \"date-fns/locale\";\nimport styles from \"./MessagePreview.module.scss\";\n\nconst MessagePreview = (props) => {\n  const data = props.data || {\n    text: \"lorem ipsum\",\n    date: new Date(),\n    sender: \"User\",\n  };\n\n  return (\n    <div className={styles.message}>\n      <h5>{data.sender}</h5>\n      <p>\n        <small>\n          {formatDistance(new Date(data.date), new Date(), {\n            addSuffix: true,\n            locale: it,\n          })}\n        </small>\n      </p>\n      <p>{data.text}</p>\n    </div>\n  );\n};\n\nexport { MessagePreview };\n","import { useState } from \"react\";\nimport { formatDistance } from \"date-fns\";\nimport { it } from \"date-fns/locale\";\nimport { httpDELETE } from \"../../libs/http\";\n\nimport Modal from \"./../Modal\";\nimport styles from \"./Post.module.scss\";\n\nconst Post = (props) => {\n  const data = props.data || {\n    author: \"User\",\n    text: \"text\",\n    date: new Date(),\n    photo:\n      \"https://images.unsplash.com/photo-1639512398860-be15f48100ea?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1024&q=80\",\n  };\n\n  const handleDeletePost = () => {\n    httpDELETE(`/posts/${props.data.id}`).then(() => {});\n    setModalVisibile(true);\n\n    setTimeout(() => {\n      setModalVisibile(false);\n      window.location.href = \"/\";\n    }, 3000);\n  };\n\n  const [isModalVisible, setModalVisibile] = useState(false);\n\n  return (\n    <article className={styles.post}>\n      {isModalVisible && (\n        <Modal bgColor=\"lightcoral\" text=\"Il post è stato rimosso\" />\n      )}\n      <button onClick={handleDeletePost} className={styles.deleteBtn}>\n        X\n      </button>\n\n      <h3>{data.author}</h3>\n      <p>\n        <small>\n          {formatDistance(new Date(data.date), new Date(), {\n            addSuffix: true,\n            locale: it,\n          })}\n        </small>\n      </p>\n      <p>{data.text}</p>\n\n      {data.photo ? <img src={data.photo} alt={data.author} /> : <></>}\n\n      {/*\n      Per gestire condizioni più complesse posso richiamare una funzione \n      \n      hasImage(data.photo) \n      */}\n    </article>\n  );\n};\n\nexport { Post };","import { useState, useEffect } from \"react\";\nimport { FriendPreview } from \"../../components/FriendPreview\";\nimport { MessagePreview } from \"../../components/MessagePreview\";\nimport { Post } from \"../../components/Post\";\nimport { http } from \"./../../libs/http\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./Home.module.scss\";\n\nconst friends = [];\n\nconst messages = [];\n\nconst posts = [];\n\nconst Home = () => {\n  const [friendsPreview, setFriendsPreview] = useState(friends);\n  const [allPosts, setAllPosts] = useState(posts);\n  const [messagesPreview, setMessagesPreview] = useState(messages);\n\n  // GETTER -> const friendPreview = [];\n  // SETTER -> friendPreview = [...]\n\n  // Esegui del codice quando il componente è inizializzato (montato in pagina)\n  // componentDidMount() --> simile a \"DOMContentLoaded\" ma solo per il componente\n  useEffect(() => {\n    // fetch(\"https://edgemony-backend.herokuapp.com/friends?_limit=4\")\n    //   .then((response) => response.json())\n    //   .then((data) => setFriendsPreview(data));\n\n    http(\"/friends?_limit=4\").then((data) => setFriendsPreview(data));\n    http(\"/messages?_limit=4\").then((data) => setMessagesPreview(data));\n    http(\"/posts\").then((data) => setAllPosts(data.reverse()));\n\n    // Promise.all([\n    //   http(\"/friends?_limit=4\"),\n    //   http(\"/messages?_limit=4\"),\n    //   http(\"/posts\")\n    // ]).then((data) => console.log(data[0]))\n  }, []);\n\n  return (\n    <section className={styles.home}>\n      <h3>Bevenuto utente</h3>\n      <div className={styles.grid}>\n        <aside>\n          {friendsPreview.map((friend, index) => (\n            <FriendPreview key={index} data={friend} />\n          ))}\n        </aside>\n        <main>\n          <Link to=\"/new-post\">\n            <button className={styles.createPostBtn}>\n              + Create a new post!\n            </button>\n          </Link>\n          {allPosts.map((post, index) => (\n            <Post key={index} data={post} />\n          ))}\n        </main>\n        <aside>\n          {messagesPreview.map((message, index) => (\n            <MessagePreview key={index} data={message} />\n          ))}\n        </aside>\n      </div>\n    </section>\n  );\n};\n\nexport default Home;\n\n"],"sourceRoot":""}